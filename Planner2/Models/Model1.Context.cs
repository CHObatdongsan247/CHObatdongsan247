//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Planner2.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Planner2Entities : DbContext
    {
        public Planner2Entities()
            : base("name=Planner2Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Bank> Banks { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<CommentTask> CommentTasks { get; set; }
        public virtual DbSet<History> Histories { get; set; }
        public virtual DbSet<MainTask> MainTasks { get; set; }
        public virtual DbSet<MainTask_ChuDe> MainTask_ChuDe { get; set; }
        public virtual DbSet<Notify> Notifies { get; set; }
        public virtual DbSet<NotifyUser> NotifyUsers { get; set; }
        public virtual DbSet<ThanhPho> ThanhPhoes { get; set; }
        public virtual DbSet<UploadFile> UploadFiles { get; set; }
        public virtual DbSet<User_Category> User_Category { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<SettingData> SettingDatas { get; set; }
        public virtual DbSet<CustomPage> CustomPages { get; set; }
    
        [DbFunction("Planner2Entities", "SplitString")]
        public virtual IQueryable<string> SplitString(string list, string delim)
        {
            var listParameter = list != null ?
                new ObjectParameter("List", list) :
                new ObjectParameter("List", typeof(string));
    
            var delimParameter = delim != null ?
                new ObjectParameter("Delim", delim) :
                new ObjectParameter("Delim", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<string>("[Planner2Entities].[SplitString](@List, @Delim)", listParameter, delimParameter);
        }
    
        public virtual int SyncDailyTask(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> iD)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SyncDailyTask", dateFromParameter, dateToParameter, iDParameter);
        }
    
        public virtual int update_newTask()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("update_newTask");
        }
    
        public virtual int Update_Status(Nullable<int> taskId, string status)
        {
            var taskIdParameter = taskId.HasValue ?
                new ObjectParameter("TaskId", taskId) :
                new ObjectParameter("TaskId", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_Status", taskIdParameter, statusParameter);
        }
    }
}
