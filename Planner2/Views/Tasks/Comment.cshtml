
@model  IEnumerable<Planner2.Models.CommentTask>

@{
    var FileUpload = (List<Planner2.Models.UploadFile>)ViewBag.FileUpload;

}

@helper AddComment(int ID)
{
    <form action="/Tasks/Comment" enctype="multipart/form-data" method="post" style="margin-bottom:10px">
        <v-textarea placeholder="Nhập nội dung phải hồi tại đây..."
                    auto-grow
                    label="Nội dung phải hồi"
                    value="" hint="Ấn CTRL+ENTER để gửi nhanh" id="NODUNG"></v-textarea>

        <div class="bottom-comment">
            <div class="comment-date">
                <input type="hidden" name="JobID" value="@ViewBag.TaskID" />
                <input type="hidden" name="ParentID" id="ParentID" value="@ID" />
                <input type="file" style="max-width:100%" multiple id="fileBase_@ID" />
            </div>

            <div style="text-align:right">
                <label><input type="checkbox" id="GuiMail" value="1" checked />Gửi thông báo qua Email</label>
                <a class="btn btn-xs btn-info text-white submit submit_@ID" data-ID="@ID" id="submit">Gửi phản hồi</a>
            </div>
        </div>
    </form>
}
@helper LItem(CommentTask item, int LV, List<Planner2.Models.UploadFile> FileUpload)
{
    @FunItem(item, LV, FileUpload)
    LV++;
    foreach (var it in Model.Where(z => z.ParentID == item.ID).OrderBy(z => z.DateCreate))
    {
        @LItem(it, LV, FileUpload);
    }


}
@helper FunItem(CommentTask item, int LV, List<Planner2.Models.UploadFile> FileUpload)
{
    var file = FileUpload.Where(z => z.TaskID == item.ID).ToList();
    if (file != null)
    {


        <li class="comment level-@LV">
            <a title="View this user profile" class="photo"><img src="~/Content/avatar.png" width="32" alt="Kasper"></a>
            <div class="meta">
                <v-btn small color="orange" style="color:#fff;margin-left:0;margin-top:0">@item.StaffID</v-btn>

                @*@item.StaffID*@  <small style="float:right">  <i class="fa fa-clock-o"></i>  @(item.DateCreate.HasValue ? item.DateCreate.Value.ToString("dd/MM/yyyy HH:mm") : "")</small>

            </div>
            <div class="body">
                <div>
                    @Html.Raw(item.NOIDUNG != null ? item.NOIDUNG.Replace("\r\n", "<br>").Replace("\n", "<br>").Replace("http://www", "") : "")

                </div>
                @if (file.Count>0 )
                {
                    <hr />

                    <b>(*)</b><span>File đính kèm : </span>

                    var dic = new Dictionary<string, bool>();
                    foreach (var x in file)
                    {
                        var tt = Planner2.Controllers.TasksController.GetImageFormat(x.UrlFile);

                        if (tt == true)
                        {
                            <a class="stopAjax" href="@x.UrlFile" target="_blank">   <img src="@x.UrlFile" style="width:100%" /></a>

                        }
                        else
                        {
                            <P> <a class="stopAjax"  download="@x.FileName" href="@x.UrlFile">@x.FileName</a></P>
 
                        }
                    }

                }

            </div>
            <p style="text-align:right">
                <a href="" data-toggle="collapse" data-target="#Reply_@item.ID" aria-expanded="false" aria-controls="Reply_@item.ID" class="reply">Phản hồi</a>
            </p>
            <div class="collapse" id="Reply_@item.ID">
                <hr />
                @AddComment(item.ID)
            </div>
        </li>
    }
    
    }
<div id="appComment">
    <v-app>
        @AddComment(0)

        <ul class="comments">
            @foreach (var item in Model.Where(z => z.ParentID == 0).OrderByDescending(z => z.DateCreate))
            {
                int LV = 1;
                @LItem(item, LV, FileUpload);
            }
        </ul>



    </v-app>
</div>



<style>


    .comments {
        width: 100%;
    }

    a {
        cursor: pointer;
    }

    /**
        * Customs
        */
    .comments:after {
        border-color: #fff;
    }

    .comments:before {
        background-color: #fff;
    }

    .comments .comment {
        background: #fff;
        border-radius: 10px;
        padding: 10px 15px;
    }

    .comments [class*="level-"] .photo:before {
        background-color: #fff;
    }

    .comments .meta {
        color: #000;
        font-weight: bold
    }

        .comments .meta a {
            color: inherit;
        }

            .comments .meta a:hover {
                color: #34b5d0;
            }

    .comments .body {
        color: #222;
    }


    .comments {
        list-style-type: none;
        padding: 5px 0 0 46px;
        position: relative;
        margin: 5px;
    }

        .comments:before,
        .comments .comment,
        .comments .comment:after,
        .comments .comment:before,
        .comments .photo img,
        .comments [class*="level-"] .photo:before {
            /*box-shadow: 0 1px 3px rgba(0,0,0,.4);*/
            box-shadow: 0 1px 10px #007bff;
        }

        .comments:after,
        .comments:before {
            display: block;
            content: '';
            position: absolute;
        }

        /*.comments:before {
            border-radius: 0 0 5px 5px;
            height: 100%;
            width: 8px;
            left: 0;
            top: 0;
        }*/

        .comments:after {
            box-shadow: 0 1px 3px rgba(0,0,0,.4), 0 1px 3px rgba(0,0,0,.4) inset;
            border-width: 4px;
            border-style: solid;
            border-radius: 18px;
            height: 10px;
            width: 10px;
            left: -5px;
            top: -16px;
            z-index: -1;
        }

        .comments .comment {
            margin-bottom: 10px;
            position: relative;
        }

            .comments .comment:after,
            .comments .comment:before {
                border-radius: 10px;
                background-color: #fff;
                position: absolute;
                display: block;
                content: '';
            }

            .comments .comment:after {
                width: 12px;
                height: 12px;
                left: -14px;
                top: 7px;
            }

            .comments .comment:before {
                width: 5px;
                height: 5px;
                left: -22px;
                top: 16px;
            }

        .comments .photo {
            position: absolute;
            left: -60px;
            top: 2px;
        }

            .comments .photo img {
                border: 1px solid #fff;
                border-radius: 32px;
                overflow: hidden;
            }

        .comments .meta {
            margin-bottom: 5px;
        }

            .comments .meta .reply {
                display: none;
                float: right;
            }

        .comments .comment:hover .reply {
            display: block;
        }

        .comments [class*="level-"] .photo:before {
            display: block;
            content: '';
            position: absolute;
            margin-top: -2px;
            height: 4px;
            width: 20px;
            left: -10px;
            top: 50%;
            z-index: -1;
        }

        .comments .level-2 {
            margin-left: 30px;
        }

        .comments .level-3 {
            margin-left: 50px;
        }

        .comments .level-4 {
            margin-left: 70px;
        }

        .comments .level-5 {
            margin-left: 90px;
        }

        .comments .level-6 {
            margin-left: 110px;
        }

        .comments .level-3 .photo:before {
            width: 40px;
            left: -30px;
        }

        .comments .level-4 .photo:before {
            width: 60px;
            left: -50px;
        }

        .comments .level-5 .photo:before {
            width: 80px;
            left: -70px;
        }

        .comments .level-6 .photo:before {
            width: 100px;
            left: -90px;
        }
</style>

<script>
    var vmComment = new Vue({

        el: "#appComment",


    })
    $('#NODUNG').keydown(function (e) {

        if (e.ctrlKey && e.keyCode == 13) {
            $(".submit_0").click();
        }
    });
    $(".submit").click(function () {

        var base = $(this).parent().parent().parent();
        var ID = $(this).attr("data-ID");
        var NOIDUNG = base.find('#NODUNG').val();
        var ParentID = base.find('#ParentID').val();
          if (NOIDUNG == null || (NOIDUNG != null && NOIDUNG.trim() == "")) {
            alert("Nội dung không được để trống");

            return;
        }
        var GuiMail = base.find('#GuiMail').is(":checked");
        var files = document.getElementById('fileBase_' + ID).files;
        var TaskID = '@ViewBag.TaskID';

            if (window.FormData !== undefined) {
                var data = new FormData();
                if (files.length > 0) {
                    for (var x = 0; x < files.length; x++) {
                    data.append(files[x].name, files[x]);
                }
            }
                data.append("TaskID", TaskID);
                data.append("GuiMail", GuiMail);
                data.append("ParentID", ParentID);
                data.append("NOIDUNG", NOIDUNG);
                $.ajax({
                    type: "POST",
                    url: '/Tasks/UploadFile',
                    contentType: false,
                    processData: false,
                    data: data,
                    success: function (result) {
                        if (result == 1) {
                            vmCreate.THONGBAO = 'Đã gửi phản hồi';
                            vmCreate.color = 'success';

                            var r = $('#Comment');
                            r.addClass("spa-loader");
                            r.load("/Tasks/Comment?TaskID=" + TaskID);
                            r.removeClass("spa-loader");

                             } else {
                            vmCreate.color = 'red';
                            vmCreate.THONGBAO = 'Lỗi';
                        }

                        vmCreate.snackbar = true;
                        setTimeout(function () {
                            $(document).find('#NOIDUNG').focus();}, 1500);

                    },
                    error: function (xhr, status, p3, p4) {
                        var err = "Error " + " " + status + " " + p3 + " " + p4;
                        if (xhr.responseText && xhr.responseText[0] == "{")
                            err = JSON.parse(xhr.responseText).Message;
                        console.log(err);
                    }
                });
            } else {
                alert("This browser doesn't support HTML5 file uploads!");
            }

     });
</script>
