
@{
    ViewBag.Title = "Danh sach cong viec";
    string Status = (string)ViewBag.Status;
    var nguoidung = (Planner2.Models.User)Session[Planner2.Controllers.LoginAuth.NameSession];
}


@{
    if (ViewBag.TaskID == 0)
    {
        Html.RenderAction("choxuly", "Tasks", new { TaskID = 0 });
    }
}
<h2>@ViewBag.Header</h2>
<div class="row">
    <div class="col-12">
        <div id="grvListTask" style="width:100%;"></div>
        <div id="loadTask"></div>
    </div>
</div>
<script>
    //Converdate
    function FromJsonToDate(value) {
        if (value != null) {
            return new Date(parseInt(value.replace('/Date(', '')));
        }
        return;
    }
    var listTask = [];
    var grvListTask = $("#grvListTask").dxDataGrid({
        dataSource: [], 
        selection: { mode: "single" },
        columnHidingEnabled: true,
        columnResizingMode: "widget",
        grouping: {
            contextMenuEnabled: true,
            expandMode: "rowClick"
        },  
        showBorders: true,
        paging: { enabled: true },
        filterRow: { visible: true, applyFilter: "auto" },
        showColumnHeaders: true,
        showColumnLines: true,
        showRowLines: true,
        pager: {
            showPageSizeSelector: true,
            allowedPageSizes: [100, 200, 500, 1000],
            showInfo: true
        },
        paging: { pageSize: 50 },
        allowColumnResizing: true,
        columnFixing: { enabled: true },
        hoverStateEnabled: true,
        headerFilter: { visible: true },
        columnsAutoWidth: true,
        allowColumnReordering: true,
        columns: [
            {
                dataField: "Id",
                visible: false
            },
            {
                dataField: "ParentID",
                visible: false,
                minWidth: 50
            },
            {
                dataField: "TaskName",
                caption: "Tên công việc",
                allowGrouping: false,
                minWidth: 100,
                width: 300,
                maxWidth: 500,
            },
            {
                dataField: "StartDate",
                caption: "Ngày bắt đầu",
                dataType: "date",
                format: "dd/MM/yyyy",
                allowHeaderFiltering: false,
                minWidth: 100, 
            },
            {
                dataField: "DueDate",
                caption: "Thời hạn",
                dataType: "date",
                format: "dd/MM/yyyy",
                allowHeaderFiltering: false,
                minWidth: 100, 
            },
            {
                dataField: "Master",
                caption: "Người thực hiện",
                minWidth: 130, 
            },
            {
                dataField: "TaskAssigner",
                caption: "Người giao việc",
                minWidth: 130,  
            },
            {
                dataField: "TaskChecker",
                caption: "Người giám sát",
                minWidth: 130,  
            },
            {
                dataField: "Authorized",
                caption: "Người ủy quyền",
                minWidth: 130,  
            },

            {
                dataField: "Status",
                caption: "Tình trạng",
                minWidth: 120,  
            },

            {
                dataField: "Days",
                caption: "Số ngày báo trước",
                minWidth: 130,  
            },
            {
                dataField: "Priority",
                caption: "Mức độ ưu tiên",
                minWidth: 150, 
            }
        ],
        onCellPrepared: function (e) {
            if (e.rowType == "header") {
                e.cellElement.addClass('headerTree');
            }
        },
        scrolling: {
            scrollByContent: true
        },
        summary: {
            totalItems: [{
                column: "TaskName",
                summaryType: "count"
            }]
        },
        onContextMenuPreparing: function (e) {
            var ckcreate = true;
            if (e.row.data.Status == 'Chưa xác nhận') {
                ckcreate = false;
            }
            var assigner_authorize = e.row.data.TaskAssigner + ';' + e.row.data.Authorized;
            var ckedit = false;
            if (assigner_authorize.includes('@nguoidung.UserName')) {
                ckedit = true;
            }
            var ckcancel = false;
            if (ckedit == true && e.row.data.Status != 'Hoàn thành' && e.row.data.Status != 'Đã hủy') {
                ckcancel = true;
            } 
            if (e.row.rowType == "data") {
                e.items = [
                    {
                        text: "Xem chi tiết",
                        icon: 'fa fa-info-circle',
                        useIcons: true,
                        onItemClick: function () {
                            var IdTassk = e.row.data.Id;
                            GoLink('/Tasks/Info?ID=' + IdTassk);
                        }
                    },
                    {
                        text: "Sửa công việc",
                        icon: 'fa fa-pencil-square-o',
                        useIcons: true,
                        visible: ckedit,
                        onItemClick: function () {
                            var IdTassk = e.row.data.Id;
                             GoLink('/Tasks/Create?TaskID=' + IdTassk  );
  }
                    },
                    {
                        text: "Hủy công việc",
                        icon: 'fa fa-ban',
                        useIcons: true,
                        visible: ckcancel,
                        onItemClick: function () {
                            var Id = e.row.data.Id;
                            var lydo = prompt('Vui lòng nhập lý do hủy công việc này ạ');
                            if (lydo != '' && lydo != null) {
                                $.ajax({
                                    url: '/FutureTask/CancelTaskById',
                                    type: 'POST',
                                    datatype: 'json',
                                    data: { Id: Id, Lydo: lydo },
                                    success: function (data) {
                                        if (data == "OK") {
                                            e.row.data.Status = "Đã hủy";
                                            DevExpress.ui.notify("Hủy công việc thành công", "success", 5000);
                                        }
                                        else {
                                            DevExpress.ui.notify("Lỗi! Không tìm thấy công việc để hủy", "error", 5000);
                                        }
                                    },
                                    error: function (data) {
                                        alert(data);
                                    }

                                });
                            }
                        }
                    },
                    {
                        text: "Tạo công việc nhỏ",
                        icon: 'fa fa-plus-square-o',
                        useIcons: true,
                        visible:ckcreate,
                        onItemClick: function () {
                            var IdTassk = e.row.data.Id;
                            GoLink('/Tasks/SubCreate?ParentID=' + IdTassk  );

                             // window.location.href = '/Home/DetailsTsuika?IdTsuika=' + e.row.data.Id + '';
                        }
                    }
                ]
            }
        }
    });

    $(function () {
        $("#loadListTask").dxLoadPanel({
            closeOnOutsideClick: false,
            message: "Xin chờ chút ạ ...",
            visible: true,
            position: { of: "#grvListTask", at: "center", my: "center" },
            shading: true
        });
        $.ajax({
            url: '/FutureTask/GetListTaskByStatus',
            type: 'POST',
            datatype: 'json',
            data: { Status: '@Status' },
            success: function (data) {
                console.log(data);
                $.each(data, function (i, item) {
                    var obj = {
                        Id: item.Id,
                        ParentID: item.ParentID,
                        TaskName: item.TaskName,
                        StartDate: FromJsonToDate(item.StartDate),
                        DueDate: FromJsonToDate(item.DueDate),
                        TaskAssigner: item.TaskAssigner,
                        TaskChecker: item.TaskChecker,
                        Authorized: item.Authorized,
                        Master: item.Master,
                        Status: item.Status,
                        Days: item.Days,
                        Priority: item.Priority
                    };
                    listTask.push(obj);
                });
                $("#grvListTask").dxDataGrid({
                    dataSource: listTask
                });
                $("#loadListTask").dxLoadPanel({
                    closeOnOutsideClick: false,
                    message: "Xin chờ chút ạ ...",
                    visible: false,
                    position: { of: "#grvListTask", at: "center", my: "center" },
                    shading: true
                });
            },
            error: function (data) {
                $("#loadListTask").dxLoadPanel({
                    closeOnOutsideClick: false,
                    message: "Xin chờ chút ạ ...",
                    visible: false,
                    position: { of: "#grvListTask", at: "center", my: "center" },
                    shading: true
                });
                alert(data);
            }

        });
    });
</script>



